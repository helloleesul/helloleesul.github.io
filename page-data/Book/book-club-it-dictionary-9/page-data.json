{"componentChunkName":"component---src-templates-post-template-tsx","path":"/Book/book-club-it-dictionary-9/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"tableOfContents":"<ul>\n<li>\n<p><a href=\"#day-12\">DAY 12</a></p>\n<ul>\n<li><a href=\"#-%EA%B8%B0%EC%96%B5%ED%95%98%EA%B3%A0-%EC%8B%B6%EC%9D%80-%EB%82%B4%EC%9A%A9\">😃 기억하고 싶은 내용</a></li>\n<li><a href=\"#-%EC%98%A4%EB%8A%98%EC%9D%98-%ED%8C%8C%ED%8A%B8%EC%97%90-%EB%8C%80%ED%95%9C-%EC%86%8C%EA%B0%90\">🤔 오늘의 파트에 대한 소감</a></li>\n<li><a href=\"#-%EC%B6%94%EA%B0%80%EB%A1%9C-%EC%95%8C%EA%B2%8C-%EB%90%9C-%EA%B2%83\">🔎 추가로 알게 된 것</a></li>\n<li><a href=\"#%EC%86%8C%EA%B0%90-3%EC%A4%84-%EC%9A%94%EC%95%BD\">🤟소감 3줄 요약</a></li>\n</ul>\n</li>\n</ul>","fields":{"readingTime":{"text":"7 min read"}},"html":"<h2 id=\"day-12\" style=\"position:relative;\">DAY 12<a href=\"#day-12\" aria-label=\"day 12 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill=\"#a0aec0\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>🔖 오늘 읽은 범위 : <strong>에피소드 35 ~ 38</strong></p>\n<ol start=\"35\">\n<li>비밀번호는 어떻게 저장될까?</li>\n<li>객체 지향 프로그래밍이 뭐죠? (1)</li>\n<li>객체 지향 프로그래밍이 뭐죠? (2)</li>\n<li>함수형 프로그래밍이 뭐죠?</li>\n</ol>\n<hr>\n<h3 id=\"-기억하고-싶은-내용\" style=\"position:relative;\">😃 기억하고 싶은 내용<a href=\"#-%EA%B8%B0%EC%96%B5%ED%95%98%EA%B3%A0-%EC%8B%B6%EC%9D%80-%EB%82%B4%EC%9A%A9\" aria-label=\" 기억하고 싶은 내용 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill=\"#a0aec0\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>\n<p>괜찮은 비밀번호 시스템의 예: <strong>해시함수</strong><br>\n내가 입력한 값을 무작위 값으로 둔갑시켜주는 녀석이야.</p>\n<ul>\n<li>규칙 1. 동일한 입력값에 대해 동일한 출력값을 가진다. (12345 → !aef3zed&#x26;^)</li>\n<li>규칙 2. 입력값이 아주 살짝만 바뀌어도 출력값은 엄청나게 크게 바뀐다.</li>\n<li>규칙 3. 반대로 입력한다고 해서 원래 값이 나오지 않는다.</li>\n</ul>\n</li>\n<li>\n<p>해시함수도 완벽하진 않다! <strong>레인보우 테이블</strong><br>\n사실 해시함수를 통과한 값은 레인보우 테이블에서 찾아보면 원래 값을 알 수 있어.</p>\n</li>\n<li>\n<p>최종병기 <strong>솔트</strong><br>\n12345와 같은 비밀번호를 무작위 텍스트인 솔트와 합쳐서 해시함수에 통과시키는 거야. 그러면 레인보우 테이블이 있어도 원래 비밀번호를 찾을 수 없을거야!</p>\n</li>\n<li>\n<p><strong>객체 지향 프로그래밍</strong> - 코드의 효율성을 UP</p>\n<ul>\n<li>\n<p>프로그래밍 패러다임 : 절차 지향 프로그래밍 / 객체 지향 프로그래밍 / 함수형 프로그래밍<br>\n→ 프로그래머가 프로그래밍을 할 때의 관점, 방식 이런 것을 말하고 프로그래밍을 하는 사고의 틀이라고 생각해도 좋아.</p>\n</li>\n<li>\n<p><strong>class</strong> : 쉽게 말해 우리가 재료만 공장에 넣어주면 나머지 코드는 공장이 알아서 찍는거야.<br>\n새 속성을 부여할 때는 공장에 알려주기만 하면 되는거지. 바로 이런 자연스런 생각이 객체 지향 프로그래민의 클래스(class)라는 개념이야.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 플레이어의 공장, 클래스</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Player</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> health<span class=\"token punctuation\">,</span> skill</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>health <span class=\"token operator\">=</span> health<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>skill <span class=\"token operator\">=</span> skill<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>xp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> bill <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Player</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Bill Gates'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">85</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Programmer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> elon <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Player</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Elon Musk'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Tesla'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p><strong>extends</strong> : 가지고 있는 class A를 다른 class B에 상속을 시키면 class A의 기본 속성은 다 가지면서 class B 자신만의 속성을 추가할 수 있어.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Human</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>arms <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>legs <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Teenager</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Human</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>emotional <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">curse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'%^@!%#!#$'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Baby</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Human</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cute <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'waa waa'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>함수형 프로그래밍</strong></p>\n<ul>\n<li>\n<p>배워야하는 이유 → 버그가 발생하기 어려운 구조</p>\n</li>\n<li>\n<p>선언형 프로그래밍과 명령형 프로그래밍의 차이</p>\n<table>\n<thead>\n<tr>\n<th>선언형 프로그래밍</th>\n<th>명령형 프로그래밍</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>원하는 결괏값을 선언한다.</td>\n<td>원하는 결괏값에 어떻게 도달하는지 명령한다.</td>\n</tr>\n<tr>\n<td>결과 중심으로 코드를 작성하니 실수도 적고, 동료가 코드를 이해하기도 쉽다.</td>\n<td>할일을 세세하게 지시할 수 있는 대신 개발자가 실수하기 쉽고, 작성한 코드를 동료가 이해하기 어렵다는 특징이 있다.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 선언형 프로그래밍</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">spaceToHeart</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span>’ ’<span class=\"token punctuation\">,</span> ‘❤️’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 명령형 프로그래밍</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">spaceToHeart</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> “”<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> text<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> ‘ ‘<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      result <span class=\"token operator\">+=</span> ‘❤️’<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      result <span class=\"token operator\">+=</span> text<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><strong>함수형 프로그래밍</strong><br>\n함수 중심으로 코드를 적는 방식으로 선언형 프로그래밍 콘셉트를 유지해.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">checkForOdd</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> item <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">removeOdd</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">items</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> items<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>checkForOdd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// checkForOdd 라는 함수를 인자로 보냈다.</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"-오늘의-파트에-대한-소감\" style=\"position:relative;\">🤔 오늘의 파트에 대한 소감<a href=\"#-%EC%98%A4%EB%8A%98%EC%9D%98-%ED%8C%8C%ED%8A%B8%EC%97%90-%EB%8C%80%ED%95%9C-%EC%86%8C%EA%B0%90\" aria-label=\" 오늘의 파트에 대한 소감 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill=\"#a0aec0\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>이름만 들으면 어려울 것 같은 <strong>객체 지향 프로그래밍</strong>을 살짝 이해할 수 있었다! 공장처럼 찍어낼 수 있는 class 개념과 class를 그대로 가져갈 수 있는 상속 개념처럼 어디선가 많이 봤던 코드를 조금이나마 알아볼 수있다고 생각하니 기쁘다.</li>\n<li>선언형과 명령형 프로그래밍 패러다임의 특징을 구분할 수 있게 되었고, 내가 써왔던 코드가 함수형 프로그래밍이었다는 사실도 알게 되었다.</li>\n</ul>\n<hr>\n<h3 id=\"-추가로-알게-된-것\" style=\"position:relative;\">🔎 추가로 알게 된 것<a href=\"#-%EC%B6%94%EA%B0%80%EB%A1%9C-%EC%95%8C%EA%B2%8C-%EB%90%9C-%EA%B2%83\" aria-label=\" 추가로 알게 된 것 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill=\"#a0aec0\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>(책 내용 +알파로 궁금한 것, 이해가 가지 않는 것 등)</p>\n<ul>\n<li>프론트엔드를 공부하며 자바스크립트에서는 객체지향프로그래밍을 어떻게 하는지 검색해봤다.<br>\n<a href=\"https://yozm.wishket.com/magazine/detail/1396/\" target=\"_blank\" rel=\"nofollow\">자바스크립트에서 객체지향을 하는 게 맞나요? | 요즘IT</a></li>\n</ul>\n<hr>\n<h3 id=\"소감-3줄-요약\" style=\"position:relative;\">🤟소감 3줄 요약<a href=\"#%EC%86%8C%EA%B0%90-3%EC%A4%84-%EC%9A%94%EC%95%BD\" aria-label=\"소감 3줄 요약 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill=\"#a0aec0\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>비밀번호는 해시함수를 이용해 솔트를 팍팍쳐야 안전하다.</li>\n<li>객체지향 프로그래밍, 선언형 프로그래밍, 명령형 프로그래밍, 함수형 프로그래밍의 특징을 말할 수 있다.</li>\n<li>공장처럼 찍어낼 수 있는 <code class=\"language-text\">class</code> 잘 기억해두겠다.</li>\n</ul>","frontmatter":{"title":"[북클럽 챌린지] DAY 12","summary":"객체 지향 프로그래밍이 뭐죠?","date":"2023-01-24","categories":["Book"],"thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8e8","images":{"fallback":{"src":"/static/7184e4a3dec2dd4f010c130d9a823d12/e4d92/book-club-it-dictionary.png","srcSet":"/static/7184e4a3dec2dd4f010c130d9a823d12/f05d2/book-club-it-dictionary.png 640w,\n/static/7184e4a3dec2dd4f010c130d9a823d12/49e4e/book-club-it-dictionary.png 1280w,\n/static/7184e4a3dec2dd4f010c130d9a823d12/e4d92/book-club-it-dictionary.png 2560w","sizes":"(min-width: 2560px) 2560px, 100vw"},"sources":[{"srcSet":"/static/7184e4a3dec2dd4f010c130d9a823d12/3c3fb/book-club-it-dictionary.webp 640w,\n/static/7184e4a3dec2dd4f010c130d9a823d12/c2dd8/book-club-it-dictionary.webp 1280w,\n/static/7184e4a3dec2dd4f010c130d9a823d12/8f165/book-club-it-dictionary.webp 2560w","type":"image/webp","sizes":"(min-width: 2560px) 2560px, 100vw"}]},"width":2560,"height":1440}},"publicURL":"/static/7184e4a3dec2dd4f010c130d9a823d12/book-club-it-dictionary.png"}}}}]},"file":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/a9e176c8b5d5241ac6440aa4781a5cc7/a0287/profile-image.png","srcSet":"/static/a9e176c8b5d5241ac6440aa4781a5cc7/6ecb6/profile-image.png 30w,\n/static/a9e176c8b5d5241ac6440aa4781a5cc7/43a9d/profile-image.png 60w,\n/static/a9e176c8b5d5241ac6440aa4781a5cc7/a0287/profile-image.png 120w,\n/static/a9e176c8b5d5241ac6440aa4781a5cc7/f5f72/profile-image.png 240w","sizes":"(min-width: 120px) 120px, 100vw"},"sources":[{"srcSet":"/static/a9e176c8b5d5241ac6440aa4781a5cc7/2b147/profile-image.webp 30w,\n/static/a9e176c8b5d5241ac6440aa4781a5cc7/caa3b/profile-image.webp 60w,\n/static/a9e176c8b5d5241ac6440aa4781a5cc7/b15f9/profile-image.webp 120w,\n/static/a9e176c8b5d5241ac6440aa4781a5cc7/b5014/profile-image.webp 240w","type":"image/webp","sizes":"(min-width: 120px) 120px, 100vw"}]},"width":120,"height":120}},"publicURL":"/static/a9e176c8b5d5241ac6440aa4781a5cc7/profile-image.png"}},"pageContext":{"slug":"/Book/book-club-it-dictionary-9/","prev":{"fields":{"slug":"/Book/book-club-it-dictionary-10/"},"frontmatter":{"title":"[북클럽 챌린지] DAY 13"}},"next":{"fields":{"slug":"/Book/book-club-it-dictionary-8/"},"frontmatter":{"title":"[북클럽 챌린지] DAY 10"}}}},"staticQueryHashes":[],"slicesMap":{}}