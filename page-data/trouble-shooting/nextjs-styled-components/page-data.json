{"componentChunkName":"component---src-templates-post-template-tsx","path":"/trouble-shooting/nextjs-styled-components/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"tableOfContents":"<ul>\n<li>\n<p><a href=\"#prop-classname-did-not-match-%EA%B2%BD%EA%B3%A0\">Prop ‘className’ did not match 경고</a></p>\n</li>\n<li>\n<p><a href=\"#styled-components%EC%9D%98-%EB%8F%99%EC%9E%91%EA%B3%BC%EC%A0%95\">styled-components의 동작과정</a></p>\n</li>\n<li>\n<p><a href=\"#nextjs%EC%99%80-styled-components\">Next.js와 styled-components</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95\">해결 방법</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\">마치며</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C\">참고 자료</a></li>\n</ul>\n</li>\n</ul>","fields":{"readingTime":{"text":"10 min read"}},"html":"<h2 id=\"prop-classname-did-not-match-경고\" style=\"position:relative;\">Prop ‘className’ did not match 경고<a href=\"#prop-classname-did-not-match-%EA%B2%BD%EA%B3%A0\" aria-label=\"prop classname did not match 경고 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill=\"#a0aec0\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<blockquote>\n<p>Warning: Prop className did not match. Server: “sc-xxx xxx” Client: “sc-yyy yyy”</p>\n</blockquote>\n<p>Next.js 프레임워크로 작업한 프로젝트에서 새로고침 시 style-components로 생성한 컴포넌트의 스타일이 사라지는 현상을 발견했다. 때문에 화면의 레이아웃이 전부 틀어지는 문제가 있었다.<br>\n경고 문구를 읽어보니 Server와 Client에서 적용된 <code class=\"language-text\">className</code>이 서로 다른 것이 원인이었다.</p>\n<hr>\n<h2 id=\"styled-components의-동작과정\" style=\"position:relative;\">styled-components의 동작과정<a href=\"#styled-components%EC%9D%98-%EB%8F%99%EC%9E%91%EA%B3%BC%EC%A0%95\" aria-label=\"styled components의 동작과정 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill=\"#a0aec0\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Button <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>button<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\tpadding: 20px;\n\twidth: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> $buttonWidth <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> $buttonWidth<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px;\n\t...\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Button $buttonWidth<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">50</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>버튼<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드처럼 <code class=\"language-text\">styled.button</code>이 호출되면 <code class=\"language-text\">Button</code>은 React 컴포넌트로 생성되고 자바스크립트의 템플릿 리터럴 문법을 사용하여 CSS를 작성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">counter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> componentId <span class=\"token operator\">=</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>styled-components는 <code class=\"language-text\">styled</code> 함수로 만든 컴포넌트마다 <a href=\"https://github.com/styled-components/styled-components/blob/1c17a0f919c7bfe36f4d55bd13f4262d6288f2e5/packages/styled-components/src/models/StyledComponent.js#L35\" target=\"_blank\" rel=\"nofollow\">🔗<code class=\"language-text\">generateId</code> 함수</a>를 이용해 고유한 ID를 생성하는데, 전역 카운터를 하나 두고 컴포넌트 하나를 처리할 때마다 증가시켜 가면서 생성된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> className <span class=\"token operator\">=</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>componentId <span class=\"token operator\">+</span> evaluatedCSS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 생성된 <code class=\"language-text\">componentId</code>와 작성된 CSS로 해시를 생성해 유니크한 <code class=\"language-text\">className</code>이 생긴다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>generatedClassName<span class=\"token punctuation\">,</span> setGeneratedClassName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">className</code>은 state로 저장되고, <code class=\"language-text\">$buttonWidth</code>와 같은 props값이 주입되거나 CSS가 바뀐다면 <code class=\"language-text\">className</code>도 변경되어 컴포넌트가 리렌더링된다.</p>\n<p>마지막으로 state를 스타일시트로 변환하는 과정을 거쳐 생성된 스타일시트를 <code class=\"language-text\">&lt;style></code> 요소로 만들어 DOM에 주입한다.</p>\n<p><strong>즉, styled-components는 <mark>자바스크립트 코드가 실행되는 환경(Client)</mark> 에 동적으로 스타일을 생성하고 적용된다.</strong></p>\n<hr>\n<h2 id=\"nextjs와-styled-components\" style=\"position:relative;\">Next.js와 styled-components<a href=\"#nextjs%EC%99%80-styled-components\" aria-label=\"nextjs와 styled components permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill=\"#a0aec0\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<blockquote>\n<p><a href=\"https://nextjs.org/docs/app/building-your-application/rendering/server-components#using-server-components-in-nextjs\" target=\"_blank\" rel=\"nofollow\">Using Server Components in Next.js</a><br>\n기본적으로 Next.js는 서버 컴포넌트를 사용합니다. 이를 통해 추가 구성 없이 서버 렌더링을 자동으로 구현할 수 있으며, 필요한 경우 클라이언트 컴포넌트를 사용하도록 선택할 수 있습니다.</p>\n</blockquote>\n<p>Next.js는 서버 컴포넌트 및 서버 사이드 렌더링(SSR)을 기본 환경으로 지원하는 프레임워크이다. SEO검색 엔진 최적화 등을 위해 처음 페이지를 로드할 때는 서버에서 렌더해 오지만, 페이지에서 링크를 클릭해 다른 페이지로 넘어갈 때는 CSR로 페이지를 렌더한다.</p>\n<p>때문에 Next.js에서 페이지의 초기 로딩, 또는 새로 고침 시 Server에서 렌더링된 <code class=\"language-text\">className</code>과 이후에 Client에서 렌더링된 <code class=\"language-text\">className</code>의 경우, 컴포넌트가 생성되는 순서에 따라 같은 컴포넌트이더라도 다른 식별자가 붙을 수 있게 되면서 클래스명이 서로 달라지게 된다.</p>\n<ul>\n<li>\n<p>초기 로딩 시 <strong>SSR</strong> 렌더링된 컴포넌트의 <strong>className A</strong>\n<img src=\"https://i.imgur.com/0toAsr3.png\" alt=\"\"></p>\n</li>\n<li>\n<p>페이지가 이동되면서 <strong>CSR</strong> 렌더링된 컴포넌트의 <strong>className B</strong>\n<img src=\"https://i.imgur.com/NX3T8QK.png\" alt=\"\"></p>\n</li>\n<li>\n<p><strong>CSR</strong> 렌더링된 컴포넌트에서 새로고침 시<br>\n이전에 <strong>SSR</strong> 렌더링되며 생성됐던 <strong>className A</strong>의 식별자를 갖게 되면서 스타일이 깨짐\n<img src=\"https://i.imgur.com/cFqNb18.png\" alt=\"\">\n<img src=\"https://i.imgur.com/UqOlIou.png\" alt=\"\"></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"해결-방법\" style=\"position:relative;\">해결 방법<a href=\"#%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95\" aria-label=\"해결 방법 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill=\"#a0aec0\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<blockquote>\n<p>경고: 런타임 자바스크립트가 필요한 CSS-in-JS 라이브러리는 현재 서버 컴포넌트에서 지원되지 않습니다. 서버 컴포넌트 및 스트리밍과 같은 최신 React 기능과 함께 CSS-in-JS를 사용하려면 라이브러리 작성자가 동시 렌더링을 포함한 최신 버전의 React를 지원해야 합니다.</p>\n</blockquote>\n<p>Next.js 공식문서에 따르면 서버 컴포넌트와 맞지 않는 styled-components같은 라이브러리를 지양하길 권하며, 해결 방법 또한 친절하게 설명해주고 있다.</p>\n<blockquote>\n<p><strong>CSS-in-JS 설정하는 방법</strong></p>\n<ol>\n<li>스타일 레지스트리를 설정하는 것</li>\n<li>useServerInsertedHTML 훅을 사용하여 규칙을 삽입하는 것</li>\n<li>클라이언트 컴포넌트를 사용하여 앱을 초기 서버 측 렌더링 중에 스타일 레지스트리로 래핑하는 것</li>\n</ol>\n</blockquote>\n<hr>\n<p><strong>Styled Components</strong></p>\n<ol>\n<li>\n<p>먼저 next.config.js에서 스타일 컴포넌트를 활성화한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">compiler</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">styledComponents</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>styled-components API를 사용하여 렌더링 중 생성된 모든 CSS 스타일 규칙을 수집하는 전역 레지스트리 컴포넌트를 생성한다. 이러한 규칙을 반환하는 함수를 구현하고, useServerInsertedHTML 훅을 사용하여 레지스트리에서 수집된 스타일을 <code class=\"language-text\">&lt;head></code>태그에 삽입한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token string\">'use client'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useServerInsertedHTML <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'next/navigation'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ServerStyleSheet<span class=\"token punctuation\">,</span> StyleSheetManager <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'styled-components'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">StyledComponentsRegistry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  children<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  children<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// styledComponentsStyleSheet라는 상태 변수를 초기화</span>\n  <span class=\"token comment\">// ServerStyleSheet 인스턴스를 보관</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>styledComponentsStyleSheet<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerStyleSheet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 서버 측에서 HTML이 DOM에 삽입될 때마다 호출되는 로직을 처리</span>\n  <span class=\"token function\">useServerInsertedHTML</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// getStyleElement()를 호출하여 스타일 요소를 가져옴</span>\n    <span class=\"token keyword\">const</span> styles <span class=\"token operator\">=</span> styledComponentsStyleSheet<span class=\"token punctuation\">.</span><span class=\"token function\">getStyleElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// instance.clearTag()를 호출하여 이전에 생성된 스타일 태그를 제거</span>\n    styledComponentsStyleSheet<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">clearTag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// CSR일 때 그대로 반환</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> window <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'CSR'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// SSR일 때</span>\n  <span class=\"token comment\">// 새로운 스타일 요소가 서버 측에서 삽입될 때마다 이전 스타일이 지워지고 새로운 스타일이 적용</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SSR'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StyleSheetManager</span></span> <span class=\"token attr-name\">sheet</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styledComponentsStyleSheet<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">StyleSheetManager</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>루트 레이아웃의 자식 요소들을 스타일 레지스트리 컴포넌트로 래핑한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> StyledComponentsRegistry <span class=\"token keyword\">from</span> <span class=\"token string\">'./lib/registry'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">RootLayout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  children<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  children<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StyledComponentsRegistry</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">StyledComponentsRegistry</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<hr>\n<h2 id=\"마치며\" style=\"position:relative;\">마치며<a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill=\"#a0aec0\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ul>\n<li>이번 문제를 발견하고 해결하기 위해 서치하면서, 수박 겉핥기로만 알 것 같았던(그러니까 클라이언트랑 서버랑 서로 다른 <code class=\"language-text\">className</code>을 갖게된 건 알았는데 도대체 왜?) 부분을 이해할 수 있었다.</li>\n<li>Next.js 프레임워크가 인기를 얻으면서 서버 사이드 환경에서의 성능 및 기타 문제로 인해 런타임 CSS-in-JS를 더 이상 권장하지않는 이유를 체감하게 되었다.</li>\n<li>Next.js 13 버전을 사용하고 해당 이슈를 겪은 덕분에 공식 문서를 열심히 읽게 되었다.<br>\n(문제를 해결하기 위해 많은 검색과 적용을 해보았지만 대부분 Next.js 12 이전 버전의 방법이었다.)</li>\n<li>참고 자료 설명이 정말 잘되어있어서 styled-components에서 <code class=\"language-text\">className</code>이 어떻게 생성되는지 동작원리에 대해 빠르게 이해할 수 있었다. 감사합니다😊</li>\n<li>라이브러리를 깊게 파고드는 것이 과연 당장 필요한 일이 아닐 수도 있지만(결국 새로운 라이브러리는 계속 나오니까..) 좋은 공부가 되었다.</li>\n<li>기록하면서 확인해보려고 해당 이슈를 만들어 낸 코드와 해결 코드를 stackblitz에 올려두었다.<br>\n<a href=\"https://stackblitz.com/edit/stackblitz-starters-yxcqye?file=README.md\" target=\"_blank\" rel=\"nofollow\">🔗이슈 프로젝트</a> <a href=\"https://stackblitz.com/edit/stackblitz-starters-pzfeg3?file=README.md\" target=\"_blank\" rel=\"nofollow\">🔗해결 프로젝트</a></li>\n</ul>\n<hr>\n<h3 id=\"참고-자료\" style=\"position:relative;\">참고 자료<a href=\"#%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C\" aria-label=\"참고 자료 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill=\"#a0aec0\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><a href=\"https://nextjs.org/docs/app/building-your-application/styling/css-in-js#styled-components\" target=\"_blank\" rel=\"nofollow\">Next.js 공식 문서: CSS-in-JS</a><br>\n<a href=\"https://shiwoo.dev/posts/next-13-and-css-in-js#styled-components%EA%B0%80-%EB%8F%99%EC%9E%91%ED%95%98%EB%8A%94-%EA%B3%BC%EC%A0%95\" target=\"_blank\" rel=\"nofollow\">styled-components가 동작하는 과정</a><br>\n👉 Next.js에서 styled-components를 적용했을 때 스타일이 깜빡이는 이유도 자세히 알 수 있다.<br>\n<a href=\"https://blog.shift.moe/2021/01/02/prop-classname-did-not-match/\" target=\"_blank\" rel=\"nofollow\">Next.js + styled-components에서 Prop <code class=\"language-text\">className</code> did not match가 발생하는 이유와 해결 방법</a></p>","frontmatter":{"title":"Next.js에서 styled-components 이슈","summary":"Next.js 프로젝트 작업 중 발생한 스타일 깨짐 현상","date":"2024-03-20","categories":["트러블슈팅"],"thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#98e8a8","images":{"fallback":{"src":"/static/7ff34913f0dc9292df729ca8c2fa331a/9ce37/nextjs-styled-components.png","srcSet":"/static/7ff34913f0dc9292df729ca8c2fa331a/e1116/nextjs-styled-components.png 384w,\n/static/7ff34913f0dc9292df729ca8c2fa331a/9b7d7/nextjs-styled-components.png 768w,\n/static/7ff34913f0dc9292df729ca8c2fa331a/9ce37/nextjs-styled-components.png 1536w","sizes":"(min-width: 1536px) 1536px, 100vw"},"sources":[{"srcSet":"/static/7ff34913f0dc9292df729ca8c2fa331a/5358b/nextjs-styled-components.webp 384w,\n/static/7ff34913f0dc9292df729ca8c2fa331a/81e8e/nextjs-styled-components.webp 768w,\n/static/7ff34913f0dc9292df729ca8c2fa331a/fe26e/nextjs-styled-components.webp 1536w","type":"image/webp","sizes":"(min-width: 1536px) 1536px, 100vw"}]},"width":1536,"height":804}},"publicURL":"/static/7ff34913f0dc9292df729ca8c2fa331a/nextjs-styled-components.png"}}}}]},"file":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/a9e176c8b5d5241ac6440aa4781a5cc7/a0287/profile-image.png","srcSet":"/static/a9e176c8b5d5241ac6440aa4781a5cc7/6ecb6/profile-image.png 30w,\n/static/a9e176c8b5d5241ac6440aa4781a5cc7/43a9d/profile-image.png 60w,\n/static/a9e176c8b5d5241ac6440aa4781a5cc7/a0287/profile-image.png 120w,\n/static/a9e176c8b5d5241ac6440aa4781a5cc7/f5f72/profile-image.png 240w","sizes":"(min-width: 120px) 120px, 100vw"},"sources":[{"srcSet":"/static/a9e176c8b5d5241ac6440aa4781a5cc7/2b147/profile-image.webp 30w,\n/static/a9e176c8b5d5241ac6440aa4781a5cc7/caa3b/profile-image.webp 60w,\n/static/a9e176c8b5d5241ac6440aa4781a5cc7/b15f9/profile-image.webp 120w,\n/static/a9e176c8b5d5241ac6440aa4781a5cc7/b5014/profile-image.webp 240w","type":"image/webp","sizes":"(min-width: 120px) 120px, 100vw"}]},"width":120,"height":120}},"publicURL":"/static/a9e176c8b5d5241ac6440aa4781a5cc7/profile-image.png"}},"pageContext":{"slug":"/trouble-shooting/nextjs-styled-components/","prev":null,"next":{"fields":{"slug":"/development/introduction-to-regex/"},"frontmatter":{"title":"정규표현식 입문기"}}}},"staticQueryHashes":[],"slicesMap":{}}