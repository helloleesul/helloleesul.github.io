{"componentChunkName":"component---src-templates-post-template-tsx","path":"/development/mvc-design-pattern/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"tableOfContents":"<ul>\n<li>\n<p><a href=\"#mvc\">MVC</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-mvc\">프론트엔드 MVC</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%EB%90%98%EB%8A%94-%EA%B8%B0%EC%88%A0%EB%93%A4\">프론트엔드에서 사용되는 기술들</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9A%94%EC%95%BD%ED%95%98%EC%9E%90%EB%A9%B4\">요약하자면</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\">참고자료</a></li>\n</ul>\n</li>\n</ul>","fields":{"readingTime":{"text":"6 min read"}},"html":"<blockquote>\n<p>면접스터디 준비 중 프론트엔드에서의 MVC 디자인패턴 개념과 이해를 위해<br>\n<a href=\"https://youtu.be/Y5vOfv67h8A?si=KjhtHK6-t-UISreA\" target=\"_blank\" rel=\"nofollow\">프론트엔드에서 MVC보다 더 많이 쓰이는 패턴은 ?</a> 유튜브 영상을 정리한 글입니다.</p>\n</blockquote>\n<h2 id=\"mvc\" style=\"position:relative;\">MVC<a href=\"#mvc\" aria-label=\"mvc permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill=\"#a0aec0\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>MVC가 많이 적용되는 곳은 대체로 백엔드이다.</p>\n<p><strong>백엔드에서의 수행절차</strong></p>\n<ol>\n<li>클라이언트의 request을 받는다.</li>\n<li>request을 분석한다.</li>\n<li>필요한 데이터를 수집/가공한다.</li>\n<li>뷰를 생성하고 response한다.</li>\n</ol>\n<p><img src=\"https://i.imgur.com/Twq5VA3.png\" alt=\"\">\n순수해야 할 모델이 뷰를 알아야하는 부분이 생기기 때문에 MVC패턴이 생겨난다.</p>\n<p><img src=\"https://i.imgur.com/7PVVBx8.png\" alt=\"\">\n컨트롤러를 중심으로 모델을 통해서 데이터를 수집하고 가공한 걸 받아온 다음에 그 모델 정보를 다시 뷰에게 전달한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Controller.js</span>\nmodel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Model</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nview <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">View</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">makeHTML</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 컨트롤러에서 모델, 뷰를 생성하여 뷰에 모델을 전달해서 의존성을 주입한다.</p>\n<hr>\n<h2 id=\"프론트엔드-mvc\" style=\"position:relative;\">프론트엔드 MVC<a href=\"#%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-mvc\" aria-label=\"프론트엔드 mvc permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill=\"#a0aec0\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><img src=\"https://i.imgur.com/0kSSXQt.png\" alt=\"\">\n프론트엔드의 request 분석 즉, 컨트롤러는 SPA의 경우 사용자가 입력한 URL을 분석하여 동적으로 페이지가 업데이트되기 때문에 해당 부분을 렌더링해주는 역할을 할 수 있다.</p>\n<blockquote>\n<p>초창기 웹 서비스의 MVC 아키텍쳐</p>\n<ul>\n<li>데이터베이스를 <code class=\"language-text\">Model</code>로 취급</li>\n<li>HTML과 CSS, 그리고 javascript까지 포함한 클라이언트 영역을 <code class=\"language-text\">View</code>로</li>\n<li>그리고 가운데서 라우터를 통해 데이터를 처리하고 새로운 HTML을 만들어서 보여주는 백엔드 영역을 <code class=\"language-text\">Controller</code>라고 취급</li>\n</ul>\n</blockquote>\n<p>사실 프론트엔드는 그 자체가 <strong>뷰(View)</strong> 이다. 따라서 뷰에 대한 처리가 필요한 걸 수도 있다.<br>\n백엔드에서의 뷰는 만들어지는 결정체였다. 클라이언트에게 줄 response할 뷰일 뿐이다.<br>\n프론트에서의 뷰는 사건의 발생지, 다시말해 온갖 이벤트가 발생한다.<br>\n뷰가 곧 메인이자 컨트롤러인 것이다.</p>\n<p>이런 프론트엔드의 특성을 뷰와 모델관계로 정리해보자면</p>\n<ol>\n<li>뷰의 변경으로 모델을 바꿔야한다. 예) 사용자 입력값</li>\n<li>모델의 변경으로 뷰를 바꿔야한다. 예) 서버로부터 받은 데이터</li>\n</ol>\n<ul>\n<li>그리고 프론트엔드의 뷰는 아주아주 많다. 그래서 우리는 뷰를 잘게 나눈다.</li>\n<li>양방향으로 데이터를 교환하게 되면서 서로간의 의존성도 많아지고 높은 복잡도가 만들어진다. 어디서 어디로 호출하는지 굉장히 혼란스러워진다.<br>\n👉 이 가운데 컨트롤러를 두게된다면 컨트롤러가 굉장히 비대해진다.</li>\n</ul>\n<p>정리하자면 프론트엔드에서는</p>\n<ul>\n<li>뷰가 아주 많다.</li>\n<li>양방향 처리가 필요하다.</li>\n<li>슈퍼 울트라 컨트롤러가 생긴다.</li>\n<li>뷰간의 계층처리가 필요하다. 👉 잦은 리렌더링을 최소화하기 위해(계층을 두고 DOM변경을 최소화)</li>\n</ul>\n<p>그래서 필요한 것은 <strong>복잡한 뷰-모델 관계를 단순화시키고, 뷰 계층처리로 쉽고 효율적인 DOM관리</strong></p>\n<p>MVC는 복잡한 뷰와 모델간의 양방향 소통을 해결해주지 않는다. 👉 패턴을 위한 코드를 만들 필요는 없다.</p>\n<hr>\n<h2 id=\"프론트엔드에서-사용되는-기술들\" style=\"position:relative;\">프론트엔드에서 사용되는 기술들<a href=\"#%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%EB%90%98%EB%8A%94-%EA%B8%B0%EC%88%A0%EB%93%A4\" aria-label=\"프론트엔드에서 사용되는 기술들 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill=\"#a0aec0\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ul>\n<li>\n<p><strong>데이터 바인딩</strong><br>\n뷰와 모델이 자동으로 변경된다. 뷰가 변경되면 모델이, 모델이 변경되면 뷰가 변경된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">// Svelt\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>hi {name}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\"><span class=\"token namespace\">bind:</span>value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{name}<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n</li>\n<li>\n<p><strong>MVVM 디자인패턴</strong></p>\n<p><img src=\"https://i.imgur.com/ZM4L2Z3.png\" alt=\"\"></p>\n<p><img src=\"https://i.imgur.com/yl0VOk8.png\" alt=\"\">\nVM: 뷰용 모델이며, 뷰와 뷰모델은 서로 양방향으로 데이터바인딩된다.<br>\n<strong>View를 그리는 Model만 다루게 되었다는 의미로 ViewModel</strong></p>\n</li>\n<li>\n<p><strong>Flux 아키텍처</strong>\n<img src=\"https://i.imgur.com/8V6IyJn.png\" alt=\"\">\n한 방향으로 흐름을 진행한다.<br>\n뷰에서 변경사항이 생기면(action) 어떤 이벤트를 발생시키고(dispatcher) store에 전달하여 다시 뷰(view)에 반영하는 단순한 흐름</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"요약하자면\" style=\"position:relative;\">요약하자면<a href=\"#%EC%9A%94%EC%95%BD%ED%95%98%EC%9E%90%EB%A9%B4\" aria-label=\"요약하자면 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill=\"#a0aec0\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>MVC는 프로그램 세계에서 인기가 많다.<br>\n프론트엔드는 뷰가 많고 인터랙션도 많다.<br>\n따라서 프론트엔드에서는 더 나은 선택이 필요하다.<br>\nMVVM, Flux등의 패턴이 유용하다.</p>\n<hr>\n<p>이해한 개념을 토대로 그림을 그려봤다.\n<img src=\"https://i.imgur.com/PlddQWR.png\" alt=\"\">\n<img src=\"https://i.imgur.com/nYYYzV7.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"참고자료\" style=\"position:relative;\">참고자료<a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\" aria-label=\"참고자료 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill=\"#a0aec0\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><a href=\"https://youtu.be/Y5vOfv67h8A?si=KjhtHK6-t-UISreA\" target=\"_blank\" rel=\"nofollow\">프론트엔드에서 MVC보다 더 많이 쓰이는 패턴은 ?</a><br>\n<a href=\"https://medium.com/hcleedev/web-react-flux-%ED%8C%A8%ED%84%B4-88d6caa13b5b\" target=\"_blank\" rel=\"nofollow\">Web: React Flux 패턴</a></p>","frontmatter":{"title":"프론트엔드에서의 MVC 디자인패턴","summary":"프론트엔드도 객체지향프로그래밍(OOP) 할 수 있겠지?","date":"2024-01-29","categories":["개발"],"thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/49fbc57167dec430cb261e23d0b2fe6f/caa7c/mvc-design-pattern.png","srcSet":"/static/49fbc57167dec430cb261e23d0b2fe6f/22ce9/mvc-design-pattern.png 235w,\n/static/49fbc57167dec430cb261e23d0b2fe6f/2d339/mvc-design-pattern.png 470w,\n/static/49fbc57167dec430cb261e23d0b2fe6f/caa7c/mvc-design-pattern.png 940w","sizes":"(min-width: 940px) 940px, 100vw"},"sources":[{"srcSet":"/static/49fbc57167dec430cb261e23d0b2fe6f/9abb6/mvc-design-pattern.webp 235w,\n/static/49fbc57167dec430cb261e23d0b2fe6f/33287/mvc-design-pattern.webp 470w,\n/static/49fbc57167dec430cb261e23d0b2fe6f/89929/mvc-design-pattern.webp 940w","type":"image/webp","sizes":"(min-width: 940px) 940px, 100vw"}]},"width":940,"height":520}},"publicURL":"/static/49fbc57167dec430cb261e23d0b2fe6f/mvc-design-pattern.png"}}}}]},"file":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/a9e176c8b5d5241ac6440aa4781a5cc7/a0287/profile-image.png","srcSet":"/static/a9e176c8b5d5241ac6440aa4781a5cc7/6ecb6/profile-image.png 30w,\n/static/a9e176c8b5d5241ac6440aa4781a5cc7/43a9d/profile-image.png 60w,\n/static/a9e176c8b5d5241ac6440aa4781a5cc7/a0287/profile-image.png 120w,\n/static/a9e176c8b5d5241ac6440aa4781a5cc7/f5f72/profile-image.png 240w","sizes":"(min-width: 120px) 120px, 100vw"},"sources":[{"srcSet":"/static/a9e176c8b5d5241ac6440aa4781a5cc7/2b147/profile-image.webp 30w,\n/static/a9e176c8b5d5241ac6440aa4781a5cc7/caa3b/profile-image.webp 60w,\n/static/a9e176c8b5d5241ac6440aa4781a5cc7/b15f9/profile-image.webp 120w,\n/static/a9e176c8b5d5241ac6440aa4781a5cc7/b5014/profile-image.webp 240w","type":"image/webp","sizes":"(min-width: 120px) 120px, 100vw"}]},"width":120,"height":120}},"publicURL":"/static/a9e176c8b5d5241ac6440aa4781a5cc7/profile-image.png"}},"pageContext":{"slug":"/development/mvc-design-pattern/","prev":null,"next":{"fields":{"slug":"/development/development-roadmap-for-beginner-developers/"},"frontmatter":{"title":"신입 개발자를 위한 개발 로드맵"}}}},"staticQueryHashes":[],"slicesMap":{}}