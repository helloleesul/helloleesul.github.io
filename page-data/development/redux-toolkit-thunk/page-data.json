{"componentChunkName":"component---src-templates-post-template-tsx","path":"/development/redux-toolkit-thunk/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"tableOfContents":"<ul>\n<li>\n<ul>\n<li><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EB%A9%B0\">들어가며</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%9A%B0%EC%84%A0-redux%EB%8A%94-%EC%9D%B4%EB%A0%87%EB%8B%A4\">우선 Redux는 이렇다.</a></p>\n</li>\n<li>\n<p><a href=\"#createasyncthunk\">createAsyncThunk</a></p>\n</li>\n<li>\n<p><a href=\"#extrareducers\">extraReducers</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%BD%94%EB%93%9C-%EB%B9%84%EA%B5%90\">코드 비교</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%A0%95%EB%A6%AC%ED%95%98%EB%A9%B0\">정리하며</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C\">참고 자료</a></li>\n</ul>\n</li>\n</ul>","fields":{"readingTime":{"text":"7 min read"}},"html":"<blockquote>\n<p>Redux toolkit thunk는 비동기적인 작업을 Redux로 처리할 때 어떻게 하면 좋을지 고민하며 만들어진 도구이다.</p>\n</blockquote>\n<h3 id=\"들어가며\" style=\"position:relative;\">들어가며<a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EB%A9%B0\" aria-label=\"들어가며 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill=\"#a0aec0\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>이전 프로젝트를 리팩토링하면서 전역 상태 관리 도구로 Redux Toolkit(이하 RTK) 사용했다. 초기 코드에도 RTK를 썼지만, 단순히 초기 상태를 정의하고, 액션 생성자를 자동으로 생성한 것으로만 상태를 업데이트해왔다.</p>\n<p>등록한 상태들은 유저 데이터, 냉장고 재료 데이터로, 둘 다 서버에서 호출해서 가져오는 데이터를 전역 상태로 사용해야했다.</p>\n<p>마침 <a href=\"https://www.wanted.co.kr/events/pre_challenge_fe_19\" target=\"_blank\" rel=\"nofollow\">3월 원티드 프리온보딩</a>의 주제 중 상태 관리와 RTK 기능을 알아보는 것이 있어서 강의를 듣고 바로 적용해보기로 했다.</p>\n<hr>\n<h2 id=\"우선-redux는-이렇다\" style=\"position:relative;\">우선 Redux는 이렇다.<a href=\"#%EC%9A%B0%EC%84%A0-redux%EB%8A%94-%EC%9D%B4%EB%A0%87%EB%8B%A4\" aria-label=\"우선 redux는 이렇다 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill=\"#a0aec0\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>Flux 아키텍처의 구현체이자 데이터간의 의존성 이슈, 즉 연쇄적인 업데이트 데이터의 흐름을 예측할 수 없게 만들었던 문제를 해결하기 위해서 만들어진 도구</p>\n<ul>\n<li><strong>전역</strong> 상태를 포함하는 단일 스토어</li>\n<li>앱에 어떤 일이 일어날 때 스토어에 일반 객체 액션을 디스패치하는 것</li>\n<li>액션을 살펴보고 불변성을 유지한 채 업데이트된 상태를 반환하는 순수 리듀서 함수</li>\n</ul>\n<p><strong>Redux의 문제점</strong></p>\n<ol>\n<li>스토어 환경 설정이 복잡하다.</li>\n<li>Redux를 유용하게 쓰려면 많은 패키지를 추가해야 한다.</li>\n<li>보일러플레이트(어떤 일을 하기 위한 상용구 코드)를 너무 많이 요구한다.</li>\n</ol>\n<blockquote>\n<p>이러한 이슈를 해결하기 위해 <strong>RTK</strong>이 등장했다. Redux를 더 쉽게 사용하기 위한 키트인 셈이다.</p>\n</blockquote>\n<hr>\n<h2 id=\"createasyncthunk\" style=\"position:relative;\">createAsyncThunk<a href=\"#createasyncthunk\" aria-label=\"createasyncthunk permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill=\"#a0aec0\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<blockquote>\n<p>RTK에는 내부적으로 thunk를 내장하고 있어서, 다른 미들웨어를 사용하지 않고도 비동기 처리를 할 수 있다.</p>\n</blockquote>\n<ul>\n<li>thunk(특정 작업을 나중에 할 수 있도록 Redux Store와 상호작용을 하는 함수)</li>\n<li>비동기 처리 시 사용</li>\n<li>액션 타입 문자열과 프로미스를 반환하는 함수를 받아 프로미스 생명주기를 따르는 액션 타입 <code class=\"language-text\">pending</code>, <code class=\"language-text\">fulfilled</code>, <code class=\"language-text\">rejected</code>을 디스패치해주는 thunk를 생성</li>\n<li>3가지 파라미터\n<ol>\n<li>type: 액션 타입으로 문자열이 들어감. 이 값을 기반으로 <code class=\"language-text\">pending</code> 등 타입이 생성되어 reducer가 생성됨</li>\n<li>payloadCreator: 콜백함수, 프로미스를 반환하는 비동기 함수</li>\n<li>options 객체</li>\n</ol>\n</li>\n</ul>\n<p>즉, <strong>createAsyncThunk</strong> 함수를 통해 비동기 작업을 처리하는 action을 만들어준다.</p>\n<hr>\n<h2 id=\"extrareducers\" style=\"position:relative;\">extraReducers<a href=\"#extrareducers\" aria-label=\"extrareducers permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill=\"#a0aec0\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ul>\n<li>reducer에서 끝내지 못한 일들을 할 수 있게 하는 함수</li>\n<li>slice reducers에 맵핑된 액션 함수가 아니라 외부의 액션을 참조하기 위해\n사용됨</li>\n<li>일반적으로 thunk를 핸들링 할 때 사용해서 addCase로 api call한 것을 분기처리를 해줄 수 있음</li>\n</ul>\n<blockquote>\n<p>동기적인 액션은 reducers를 사용하고, 비동기적인 extraReducers를 사용하는데<br>\nreducers는 action creator를 자동으로 만들어준다.</p>\n</blockquote>\n<hr>\n<h2 id=\"코드-비교\" style=\"position:relative;\">코드 비교<a href=\"#%EC%BD%94%EB%93%9C-%EB%B9%84%EA%B5%90\" aria-label=\"코드 비교 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill=\"#a0aec0\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ul>\n<li><strong>기존 코드</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// login form</span>\n<span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token constant\">POST</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/login'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> email<span class=\"token punctuation\">,</span> password <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">STATUS_CODE</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OK</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MESSAGE</span><span class=\"token punctuation\">.</span><span class=\"token constant\">LOGIN</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FAILURE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">updateIngredients</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>fridge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// authSlice</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> authSlice <span class=\"token operator\">=</span> <span class=\"token function\">createSlice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'auth'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">initialState</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">isAuthenticated</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">reducers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">login</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      state<span class=\"token punctuation\">.</span>isAuthenticated <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      state<span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><strong>thunk를 적용한 코드</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// login form</span>\n<span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">asyncLogin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> email<span class=\"token punctuation\">,</span> password <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// authSlice</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> asyncLogin <span class=\"token operator\">=</span> <span class=\"token function\">createAsyncThunk</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'auth/asyncLogin'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> dispatch <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token constant\">POST</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/login'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> user <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> response<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetchFridge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> authSlice <span class=\"token operator\">=</span> <span class=\"token function\">createSlice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'auth'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">initialState</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">isAuthenticated</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">extraReducers</span><span class=\"token operator\">:</span> <span class=\"token parameter\">builder</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 로그인</span>\n    builder<span class=\"token punctuation\">.</span><span class=\"token function\">addCase</span><span class=\"token punctuation\">(</span>asyncLogin<span class=\"token punctuation\">.</span>pending<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      state<span class=\"token punctuation\">.</span>isAuthenticated <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      state<span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    builder<span class=\"token punctuation\">.</span><span class=\"token function\">addCase</span><span class=\"token punctuation\">(</span>asyncLogin<span class=\"token punctuation\">.</span>fulfilled<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      state<span class=\"token punctuation\">.</span>isAuthenticated <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      state<span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    builder<span class=\"token punctuation\">.</span><span class=\"token function\">addCase</span><span class=\"token punctuation\">(</span>asyncLogin<span class=\"token punctuation\">.</span>rejected<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      state<span class=\"token punctuation\">.</span>isAuthenticated <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      state<span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'🚀 ~ asyncLogin ~ rejected:'</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<h2 id=\"정리하며\" style=\"position:relative;\">정리하며<a href=\"#%EC%A0%95%EB%A6%AC%ED%95%98%EB%A9%B0\" aria-label=\"정리하며 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill=\"#a0aec0\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ul>\n<li><strong>UI(비동기 함수 + reducers) ➡️ 저장소 ➡️ UI</strong><br>\n기존에는 RTK의 비동기 처리 기능을 사용하지 않고 ui 컴포넌트 내에서 서버에 데이터를 요청하는 비동기 함수를 일일히 작성하고 데이터를 가져와서 store를 업데이트 시키는 구조였다면,</li>\n<li><strong>UI ➡️ 저장소(createAsyncThunk + extraReducers) ➡️ UI</strong><br>\ncreateAsyncThunk를 통해서 서버에서 데이터 가져와서 store에 저장하고, ui는 store를 구독해놓고, 데이터가 바뀌면 ui도 자동으로 변경되는 구조로 컴포넌트 외부에서 비동기 처리를 할 수 있기 때문에 관심사 분리가 가능해졌다.</li>\n</ul>\n<hr>\n<h3 id=\"참고-자료\" style=\"position:relative;\">참고 자료<a href=\"#%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C\" aria-label=\"참고 자료 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill=\"#a0aec0\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li><a href=\"https://youtu.be/K-3sBc2pUJ4?si=iy03P9XZJ4wXbh-U\" target=\"_blank\" rel=\"nofollow\">생활코딩 - redux toolkit - thunk 를 이용해서 비동기 작업을 처리하는 방법(+ 썸네일 이미지 출처)</a></li>\n<li><a href=\"https://blog.hwahae.co.kr/all/tech/6946\" target=\"_blank\" rel=\"nofollow\">리덕스 툴킷은 정말 천덕꾸러기일까?</a></li>\n</ul>","frontmatter":{"title":"Redux Toolkit Thunk","summary":"Redux에서 비동기 작업을 처리하는 createAsyncThunk 함수를 써보자.","date":"2024-03-30","categories":["개발"],"thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/7bd6daf404694dec54444b2059d4e0b4/ab637/redux-toolkit-thunk.png","srcSet":"/static/7bd6daf404694dec54444b2059d4e0b4/bb691/redux-toolkit-thunk.png 584w,\n/static/7bd6daf404694dec54444b2059d4e0b4/7aafd/redux-toolkit-thunk.png 1167w,\n/static/7bd6daf404694dec54444b2059d4e0b4/ab637/redux-toolkit-thunk.png 2334w","sizes":"(min-width: 2334px) 2334px, 100vw"},"sources":[{"srcSet":"/static/7bd6daf404694dec54444b2059d4e0b4/d265f/redux-toolkit-thunk.webp 584w,\n/static/7bd6daf404694dec54444b2059d4e0b4/73924/redux-toolkit-thunk.webp 1167w,\n/static/7bd6daf404694dec54444b2059d4e0b4/d7000/redux-toolkit-thunk.webp 2334w","type":"image/webp","sizes":"(min-width: 2334px) 2334px, 100vw"}]},"width":2334,"height":1274}},"publicURL":"/static/7bd6daf404694dec54444b2059d4e0b4/redux-toolkit-thunk.png"}}}}]},"file":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/a9e176c8b5d5241ac6440aa4781a5cc7/a0287/profile-image.png","srcSet":"/static/a9e176c8b5d5241ac6440aa4781a5cc7/6ecb6/profile-image.png 30w,\n/static/a9e176c8b5d5241ac6440aa4781a5cc7/43a9d/profile-image.png 60w,\n/static/a9e176c8b5d5241ac6440aa4781a5cc7/a0287/profile-image.png 120w,\n/static/a9e176c8b5d5241ac6440aa4781a5cc7/f5f72/profile-image.png 240w","sizes":"(min-width: 120px) 120px, 100vw"},"sources":[{"srcSet":"/static/a9e176c8b5d5241ac6440aa4781a5cc7/2b147/profile-image.webp 30w,\n/static/a9e176c8b5d5241ac6440aa4781a5cc7/caa3b/profile-image.webp 60w,\n/static/a9e176c8b5d5241ac6440aa4781a5cc7/b15f9/profile-image.webp 120w,\n/static/a9e176c8b5d5241ac6440aa4781a5cc7/b5014/profile-image.webp 240w","type":"image/webp","sizes":"(min-width: 120px) 120px, 100vw"}]},"width":120,"height":120}},"publicURL":"/static/a9e176c8b5d5241ac6440aa4781a5cc7/profile-image.png"}},"pageContext":{"slug":"/development/redux-toolkit-thunk/","prev":null,"next":{"fields":{"slug":"/development/vm-deploy/"},"frontmatter":{"title":"가상머신(VM)으로 배포하는 방법"}}}},"staticQueryHashes":[],"slicesMap":{}}