{"componentChunkName":"component---src-templates-post-template-tsx","path":"/development/introduction-to-regex/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"tableOfContents":"<ul>\n<li><a href=\"#%EA%B2%BD%ED%97%98\">경험</a></li>\n<li><a href=\"#%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%AC%B8%EC%A0%9C1\">코딩테스트 문제1.</a></li>\n<li><a href=\"#%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D-%EC%8B%9C%EC%9E%91%ED%95%B4%EB%B3%B4%EA%B8%B0\">정규표현식 시작해보기</a></li>\n<li><a href=\"#%EC%A0%84%ED%99%94%EB%B2%88%ED%98%B8%EB%A7%8C-%EC%B0%BE%EB%8A%94-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D\">전화번호만 찾는 정규표현식</a></li>\n<li><a href=\"#%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%AC%B8%EC%A0%9C2\">코딩테스트 문제2.</a></li>\n<li><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\">마치며</a></li>\n</ul>","fields":{"readingTime":{"text":"9 min read"}},"html":"<blockquote>\n<p>코딩테스트 연습을 하다가 정규표현식으로 간단하게 풀이할 수 있는 문제를 발견했다.</p>\n</blockquote>\n<h3 id=\"경험\" style=\"position:relative;\">경험<a href=\"#%EA%B2%BD%ED%97%98\" aria-label=\"경험 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill=\"#a0aec0\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>프로젝트 작업을 했을 때, 회원가입 시 필수 조건을 제어하기 위해 정규표현식을 적용해보았다. 정규표현식은 외계어처럼 보여서 해석하기가 어려웠고, 전체를 학습하는 데에는 많은 시간이 소요될 것 같아 필요한 조건만 검색하여 사용했다. 해석이 필요한 경우에는 chat GPT를 활용하여 잠시 도움을 받았지만, 머릿속에서 빠르게 사라져 버리는 경험을 했다.</p>\n<hr>\n<h3 id=\"코딩테스트-문제1\" style=\"position:relative;\">코딩테스트 문제1.<a href=\"#%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%AC%B8%EC%A0%9C1\" aria-label=\"코딩테스트 문제1 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill=\"#a0aec0\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><a href=\"https://school.programmers.co.kr/learn/courses/30/lessons/120849\" target=\"_blank\" rel=\"nofollow\">모음 제거</a></p>\n<p>영어에선 a, e, i, o, u 다섯 가지 알파벳을 모음으로 분류합니다. 문자열 <code class=\"language-text\">my_string</code>이 매개변수로 주어질 때 모음을 제거한 문자열을 return하도록 solution 함수를 완성해주세요.</p>\n<table>\n<thead>\n<tr>\n<th>입력값</th>\n<th>기댓값</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>“nice to meet you”</td>\n<td>“nc t mt y”</td>\n</tr>\n<tr>\n<td>“bus”</td>\n<td>“bs”</td>\n</tr>\n</tbody>\n</table>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">my_string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> my_string<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[aeiou]</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>위 문제를 정규표현식으로 풀이하는 과정을 보고 나도 정규표현식을 기초라도 원하는 대로 사용할 수 있으면 좋을 것 같다는 생각이 들었다.</p>\n</blockquote>\n<hr>\n<h3 id=\"정규표현식-시작해보기\" style=\"position:relative;\">정규표현식 시작해보기<a href=\"#%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D-%EC%8B%9C%EC%9E%91%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"정규표현식 시작해보기 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill=\"#a0aec0\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><a href=\"https://school.programmers.co.kr/learn/courses/11/11-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D\" target=\"_blank\" rel=\"nofollow\">프로그래머스 정규표현식 무료 강의</a>를 통해서 기초를 익혀보기로 했다.<br>\n사람 이름, 전화번호, 이메일이 있는 주소록에서 전화번호만 찾는 정규표현식을 기반으로 하나씩 학습하는 과정으로 이루어져있다.</p>\n<ul>\n<li>\n<p><strong>숫자 대표문자</strong><br>\n<code class=\"language-text\">\\d</code>는 숫자를 대표하는 정규표현식입니다. 이때 d는 digit을 뜻합니다.</p>\n</li>\n<li>\n<p><strong>글자(문자, 숫자, 언더스코어) 대표문자</strong><br>\n<code class=\"language-text\">\\w</code>는 글자를 대표하는 정규표현식입니다.</p>\n<ul>\n<li><code class=\"language-text\">a, b, c, 가, 나, 다, 1, 2</code>와 같은 문자와 숫자를 포함합니다.</li>\n<li>특수문자는 포함하지 않지만, <code class=\"language-text\">_</code>(언더스코어)는 포함합니다.</li>\n</ul>\n</li>\n<li>\n<p><strong>하나 이상</strong><br>\n<code class=\"language-text\">\\d</code>는 숫자를 한글자만 찾습니다. 그런데, 전화번호를 구성하는 043이나 2568같이 연결된 숫자를 찾고 싶을 때는 어떻게 해야 할까요?<br>\n그럴 땐 <code class=\"language-text\">+</code>를 이용하면 됩니다. <code class=\"language-text\">+</code>는 “하나 혹은 그 이상 연결된”이라는 뜻입니다. 따라서 <code class=\"language-text\">\\d+</code>는 “하나 혹은 그 이상 연결된 숫자”를 의미합니다.</p>\n</li>\n<li>\n<p><strong>0개 이상</strong><br>\n<code class=\"language-text\">*</code>은 “0개 이상”이라는 뜻입니다. 따라서 <code class=\"language-text\">\\d*</code>는 “숫자가 0개 이상이다”를 의미합니다. 이를 이용하면 자연수는 <code class=\"language-text\">[1-9]\\d*</code>로 표현할 수 있습니다.</p>\n</li>\n<li>\n<p><strong>있거나 없거나</strong><br>\n모든 전화번호를 찾으려면</p>\n<ul>\n<li>“-가 있거나 없다”는 조건이 아니라</li>\n<li>”- 또는 공백이 있거나 없다”는 조건을 써야 합니다.\n<code class=\"language-text\">-</code> 또는 (공백)이 있거나 없다는 조건은 <code class=\"language-text\">[- ]?</code>로 표현할 수 있습니다.\n<blockquote>\n<p>때문에 <code class=\"language-text\">\\d+[- ]?\\d+[- ]?\\d+</code>를 해석하면 <code class=\"language-text\">하나 이상 연결된 숫자와 -또는 공백이 있거나 없거나 하나 이상 연결된 숫자와 -또는 공백이 있거나 없거나 하나 이상 연결된 숫자</code>로 읽을 수 있다.</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>n번</strong><br>\n<code class=\"language-text\">{숫자}</code>는 ”<code class=\"language-text\">숫자</code>번 반복한다”는 뜻입니다. 예를 들어 <code class=\"language-text\">\\d{2}</code>는 “숫자가 연속 두 번 나온다”는 뜻입니다.<br>\n<code class=\"language-text\">{숫자1, 숫자2}</code>는 “숫자1부터 숫자2까지 반복한다”는 뜻입니다. 예를 들어, <code class=\"language-text\">\\w{2,3}</code>는 “문자가 2 ~ 3번 나온다”는 뜻입니다.</p>\n</li>\n<li>\n<p><strong>글자 고르기</strong><br>\n알파벳 중에 소문자 모음(a,e,i,o,u)만 고르고 싶을 땐 어떻게 할까요?<br>\n그럴 때는 <code class=\"language-text\">[aeiou]</code>라고 적어주세요. 정규표현식에서 대괄호[ ] 안에 글자를 넣으면 해당 글자를 모두 선택할 수 있습니다.</p>\n<p><strong>소문자 알파벳</strong>만 고르고 싶을 땐 어떻게 할까요? <code class=\"language-text\">[abcdefghijklmnopqrlstuvwxyz]</code>처럼 대괄호 안에 소문자를 모두 나열할 수도 있지만 뭔가 찜찜하지요.<br>\n우리는 간단히 <code class=\"language-text\">[a-z]</code>를 쓰도록 합시다. <code class=\"language-text\">[a-z]</code>는 “a부터 z까지 글자를 모두 선택하라”는 의미입니다.</p>\n<p><strong>연속된 영어 소문자</strong>를 찾으려면 어떻게 할까요?</p>\n<ol>\n<li>소문자를 뜻하는 <code class=\"language-text\">[a-z]</code>와</li>\n<li>반복을 뜻하는 <code class=\"language-text\">+</code>를 붙여 => <code class=\"language-text\">[a-z]+</code>를 씁니다.</li>\n</ol>\n<p><strong>한글 단어</strong>를 찾으려면 어떻게 할까요?<br>\n한글의 첫 번째 글자는 <code class=\"language-text\">가</code>이고 마지막 글자는 <code class=\"language-text\">힣</code>입니다. 따라서 한글은 <code class=\"language-text\">[가-힣]</code>으로 찾을 수 있습니다.</p>\n<table>\n<thead>\n<tr>\n<th>의미</th>\n<th>입력값</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>숫자</td>\n<td><code class=\"language-text\">\\d</code></td>\n</tr>\n<tr>\n<td>숫자 제외한 문자</td>\n<td><code class=\"language-text\">\\D</code></td>\n</tr>\n<tr>\n<td>글자</td>\n<td><code class=\"language-text\">\\w</code></td>\n</tr>\n<tr>\n<td>글자 대표 문자를 제외한 글자들(특수문자, 공백 등)</td>\n<td><code class=\"language-text\">\\W</code></td>\n</tr>\n<tr>\n<td>공백 문자(스페이스, 탭, 뉴라인)</td>\n<td><code class=\"language-text\">\\s</code></td>\n</tr>\n<tr>\n<td>공백 문자를 제외한 문자</td>\n<td><code class=\"language-text\">\\S</code></td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<hr>\n<h3 id=\"전화번호만-찾는-정규표현식\" style=\"position:relative;\">전화번호만 찾는 정규표현식<a href=\"#%EC%A0%84%ED%99%94%EB%B2%88%ED%98%B8%EB%A7%8C-%EC%B0%BE%EB%8A%94-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D\" aria-label=\"전화번호만 찾는 정규표현식 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill=\"#a0aec0\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">0\\d{1,2}[ -]?\\d{3,4}[ -]?\\d{3,4}</code><br>\n<strong>0 그리고 숫자가 1 ~ 2번 나오고 공백 또는 -가 있거나 없고, 숫자가 3 ~ 4번 나오고 공백 또는 -가 있거나 없고, 숫자가 3 ~ 4번 나온다.</strong> 로 해석할 수 있다.</p>\n<hr>\n<h3 id=\"코딩테스트-문제2\" style=\"position:relative;\">코딩테스트 문제2.<a href=\"#%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%AC%B8%EC%A0%9C2\" aria-label=\"코딩테스트 문제2 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill=\"#a0aec0\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><a href=\"https://school.programmers.co.kr/learn/courses/30/lessons/120851\" target=\"_blank\" rel=\"nofollow\">숨어있는 숫자의 덧셈 (1)</a></p>\n<p>문자열 <code class=\"language-text\">my_string</code>이 매개변수로 주어집니다. <code class=\"language-text\">my_string</code>안의 모든 자연수들의 합을 return하도록 solution 함수를 완성해주세요.</p>\n<table>\n<thead>\n<tr>\n<th>입력값</th>\n<th>기댓값</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>“aAb1B2cC34oOp”</td>\n<td>10</td>\n</tr>\n<tr>\n<td>“1a2b3c4d123”</td>\n<td>16</td>\n</tr>\n</tbody>\n</table>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">my_string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> answer <span class=\"token operator\">=</span> my_string<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[a-z]</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">gi</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>answer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>acc <span class=\"token operator\">+=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>나의 풀이를 보면 a-z까지 알파벳을 공백문자로 변환하여 알파벳을 없애고 남아있는 숫자를 배열로 만들어 모두 합산했다. i는 대소문자를 구분하지 않는다는 의미이다.</p>\n</blockquote>\n<hr>\n<h3 id=\"마치며\" style=\"position:relative;\">마치며<a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill=\"#a0aec0\" fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>우연히 마주친 문제에서 필요한 부분을 잠시 학습하고 바로 적용해보니 좋았다. 나중에 다시 내가 기록한 이 글을 훑어봐도 도움이 될 것 같고, 앞으로 더 알아야 하겠지만 코드에 정규표현식을 유용하게 써볼 수 있을 것 같다.</p>","frontmatter":{"title":"정규표현식 입문기","summary":"코딩테스트 연습을 하다가 정규표현식으로 간단하게 풀이할 수 있는 문제를 발견했다.","date":"2024-02-11","categories":["개발"],"thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#081808","images":{"fallback":{"src":"/static/18cdb7875dd9a75ed3f0ce2df714db31/b348d/introduction-to-regex.jpg","srcSet":"/static/18cdb7875dd9a75ed3f0ce2df714db31/3a831/introduction-to-regex.jpg 300w,\n/static/18cdb7875dd9a75ed3f0ce2df714db31/70765/introduction-to-regex.jpg 600w,\n/static/18cdb7875dd9a75ed3f0ce2df714db31/b348d/introduction-to-regex.jpg 1200w","sizes":"(min-width: 1200px) 1200px, 100vw"},"sources":[{"srcSet":"/static/18cdb7875dd9a75ed3f0ce2df714db31/110da/introduction-to-regex.webp 300w,\n/static/18cdb7875dd9a75ed3f0ce2df714db31/ce644/introduction-to-regex.webp 600w,\n/static/18cdb7875dd9a75ed3f0ce2df714db31/43b31/introduction-to-regex.webp 1200w","type":"image/webp","sizes":"(min-width: 1200px) 1200px, 100vw"}]},"width":1200,"height":804}},"publicURL":"/static/18cdb7875dd9a75ed3f0ce2df714db31/introduction-to-regex.jpg"}}}}]},"file":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/a9e176c8b5d5241ac6440aa4781a5cc7/a0287/profile-image.png","srcSet":"/static/a9e176c8b5d5241ac6440aa4781a5cc7/6ecb6/profile-image.png 30w,\n/static/a9e176c8b5d5241ac6440aa4781a5cc7/43a9d/profile-image.png 60w,\n/static/a9e176c8b5d5241ac6440aa4781a5cc7/a0287/profile-image.png 120w,\n/static/a9e176c8b5d5241ac6440aa4781a5cc7/f5f72/profile-image.png 240w","sizes":"(min-width: 120px) 120px, 100vw"},"sources":[{"srcSet":"/static/a9e176c8b5d5241ac6440aa4781a5cc7/2b147/profile-image.webp 30w,\n/static/a9e176c8b5d5241ac6440aa4781a5cc7/caa3b/profile-image.webp 60w,\n/static/a9e176c8b5d5241ac6440aa4781a5cc7/b15f9/profile-image.webp 120w,\n/static/a9e176c8b5d5241ac6440aa4781a5cc7/b5014/profile-image.webp 240w","type":"image/webp","sizes":"(min-width: 120px) 120px, 100vw"}]},"width":120,"height":120}},"publicURL":"/static/a9e176c8b5d5241ac6440aa4781a5cc7/profile-image.png"}},"pageContext":{"slug":"/development/introduction-to-regex/","prev":null,"next":{"fields":{"slug":"/development/react-next-master/"},"frontmatter":{"title":"React.js & Next.js 강의 기록"}}}},"staticQueryHashes":[],"slicesMap":{}}