{"version":3,"file":"component---src-templates-post-template-tsx-5d76fe5f0f4f7bc2545f.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/ToTopButton/styled.ts","webpack://gatsby-starter-default/./src/components/ToTopButton/index.tsx","webpack://gatsby-starter-default/./src/components/PostHead/PostHeadInfo/styled.tsx","webpack://gatsby-starter-default/./src/components/PostHead/PostHeadInfo/index.tsx","webpack://gatsby-starter-default/./src/components/PostHead/styled.tsx","webpack://gatsby-starter-default/./src/components/PostHead/index.tsx","webpack://gatsby-starter-default/./src/components/PostContent/styled.ts","webpack://gatsby-starter-default/./src/components/PostContent/index.tsx","webpack://gatsby-starter-default/./src/components/Comment/styled.ts","webpack://gatsby-starter-default/./src/components/Comment/index.tsx","webpack://gatsby-starter-default/./src/components/ArticleLinks/styled.ts","webpack://gatsby-starter-default/./src/components/ArticleLinks/index.tsx","webpack://gatsby-starter-default/./src/components/TableOfContents/styled.ts","webpack://gatsby-starter-default/./src/components/TableOfContents/index.tsx","webpack://gatsby-starter-default/./src/templates/post_template.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ButtonWrapper = styled.div`\n  position: sticky;\n  bottom: 2rem;\n`;\n\nexport const Button = styled.button`\n  cursor: pointer;\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  background: #fff;\n  border-radius: 100px;\n  border: none;\n  outline: none;\n`;\n","import React from 'react';\nimport { ButtonWrapper, Button } from './styled';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCircleChevronUp } from '@fortawesome/free-solid-svg-icons';\nimport theme from '~/styles/theme';\n\nexport default function ToTopButton() {\n  const handleToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  };\n  return (\n    <ButtonWrapper>\n      <Button onClick={handleToTop}>\n        <FontAwesomeIcon\n          icon={faCircleChevronUp}\n          size=\"3x\"\n          color={theme.PALETTE.gray300}\n        />\n      </Button>\n    </ButtonWrapper>\n  );\n}\n","import styled from '@emotion/styled';\nimport { Link } from 'gatsby';\nimport { RoundItem, SCALE_TRANSITION, TABLET } from '~/styles/common';\n\ntype GatsbyLinkProps = {\n  children: React.ReactNode;\n  className?: string;\n  to: string;\n};\n\nexport const PostHeadInfoWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  margin-bottom: 2rem;\n`;\n\nexport const Title = styled.div`\n  font-size: 36px;\n  font-weight: 800;\n\n  ${TABLET} {\n    font-size: 30px;\n  }\n`;\n\nexport const PostData = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 0.5rem;\n\n  ${TABLET} {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 20px;\n  }\n`;\n\nexport const Category = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n  list-style: none;\n`;\n\nexport const Date = styled.span`\n  ${RoundItem}\n  font-family: system-ui, sans-serif;\n  margin-right: 1rem;\n`;\n\nexport const CategoryItem = styled((props: GatsbyLinkProps) => (\n  <Link {...props} />\n))`\n  ${RoundItem}\n  ${SCALE_TRANSITION}\n`;\n","import React from 'react';\nimport {\n  PostHeadInfoWrapper,\n  PostData,\n  Title,\n  Date,\n  Category,\n  CategoryItem,\n} from './styled';\nimport { PostHeadInfoProps } from '~/types/Post.types';\n\nexport default function PostHeadInfo({\n  title,\n  date,\n  categories,\n  readingTime,\n}: PostHeadInfoProps) {\n  return (\n    <PostHeadInfoWrapper>\n      <Title>{title}</Title>\n      <PostData>\n        <div>\n          <Date>{date}</Date>\n          <span>{readingTime}</span>\n        </div>\n        <Category>\n          {categories.map(category => (\n            <li key={category}>\n              <CategoryItem to={`/?category=${category}`}>\n                {category}\n              </CategoryItem>\n            </li>\n          ))}\n        </Category>\n      </PostData>\n    </PostHeadInfoWrapper>\n  );\n}\n","import styled from '@emotion/styled';\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image';\nimport { TABLET } from '~/styles/common';\n\ntype GatsbyImgProps = {\n  image: IGatsbyImageData;\n  alt: string;\n  className?: string;\n};\n\nexport const PostHeadWrapper = styled.div``;\n\nexport const BackgroundImage = styled((props: GatsbyImgProps) => (\n  <GatsbyImage {...props} />\n))`\n  width: 100%;\n  height: 400px;\n  object-fit: cover;\n  border-radius: 1rem;\n\n  ${TABLET} {\n    height: 300px;\n  }\n`;\n","import React from 'react';\nimport { IGatsbyImageData } from 'gatsby-plugin-image';\n\nimport { PostHeadInfoProps } from '~/types/Post.types';\nimport PostHeadInfo from './PostHeadInfo';\nimport { PostHeadWrapper, BackgroundImage } from './styled';\n\ntype PostHeadProps = PostHeadInfoProps & {\n  thumbnail: IGatsbyImageData;\n  readingTime: string;\n};\n\nexport default function PostHead({\n  title,\n  date,\n  categories,\n  thumbnail,\n  readingTime,\n}: PostHeadProps) {\n  return (\n    <PostHeadWrapper>\n      <PostHeadInfo\n        title={title}\n        date={date}\n        categories={categories}\n        readingTime={readingTime}\n      />\n      <BackgroundImage image={thumbnail} alt=\"thumbnail\" />\n    </PostHeadWrapper>\n  );\n}\n","import styled from '@emotion/styled';\nimport { TABLET } from '~/styles/common';\n\nexport const MarkdownRenderer = styled.div`\n  // Renderer Style\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n  padding: 50px 0;\n  word-break: break-all;\n\n  // Markdown Style\n  line-height: 1.8;\n  font-size: 16px;\n  font-weight: 400;\n\n  // Apply Padding Attribute to All Elements\n  p {\n    padding: 3px 0;\n  }\n\n  // Adjust Heading Element Style\n  h1,\n  h2,\n  h3 {\n    font-weight: 800;\n  }\n\n  * + h1,\n  * + h2,\n  * + h3 {\n    margin-top: 20px;\n  }\n\n  hr + h1,\n  hr + h2,\n  hr + h3 {\n    margin-top: 0;\n  }\n\n  h1 {\n    font-size: 30px;\n  }\n\n  h2 {\n    font-size: 25px;\n  }\n\n  h3 {\n    font-size: 20px;\n  }\n\n  // Adjust Quotation Element Style\n  blockquote {\n    margin: 30px 0;\n    padding: 5px 15px;\n    border-left: 2px solid;\n    font-weight: 500;\n  }\n\n  // Adjust List Element Style\n  ol,\n  ul {\n    margin-left: 20px;\n    padding: 10px 0;\n  }\n\n  // Adjust Horizontal Rule style\n  hr {\n    height: 1px;\n    border: none;\n    margin: 30px 0;\n  }\n\n  // Adjust Link Element Style\n  a {\n    &:hover {\n      text-decoration: underline;\n    }\n  }\n\n  // Adjust Code Style\n  pre[class*='language-'] {\n    margin: 30px 0;\n    padding: 15px;\n    font-size: 15px;\n    border-radius: 8px;\n\n    ::-webkit-scrollbar-thumb {\n      background: rgba(255, 255, 255, 0.5);\n      border-radius: 3px;\n    }\n  }\n\n  code[class*='language-'],\n  pre[class*='language-'] {\n    tab-size: 2;\n  }\n\n  img {\n    max-width: 100%;\n  }\n\n  table {\n    border-collapse: collapse;\n    margin: 1rem 0;\n  }\n  th,\n  td {\n    border: 1px solid;\n    padding: 2px 10px;\n  }\n\n  // Markdown Responsive Design\n  ${TABLET} {\n    padding: 80px 20px;\n    line-height: 1.6;\n    font-size: 14px;\n\n    h1 {\n      font-size: 23px;\n    }\n\n    h2 {\n      font-size: 20px;\n    }\n\n    h3 {\n      font-size: 17px;\n    }\n\n    img {\n      width: 100%;\n    }\n\n    hr {\n      margin: 10px 0;\n    }\n  }\n`;\n","import React from 'react';\nimport { MarkdownRenderer } from './styled';\n\ninterface PostContentProps {\n  html: string;\n}\n\nexport default function PostContent({ html }: PostContentProps) {\n  return (\n    <MarkdownRenderer\n      id=\"MarkdownRenderer\"\n      dangerouslySetInnerHTML={{ __html: html }}\n    />\n  );\n}\n","import styled from '@emotion/styled';\nimport theme from '~/styles/theme';\n\nexport const CommentWrapper = styled.div`\n  .giscus {\n    margin-top: 2rem;\n    padding-top: 2rem;\n    border-top: 1px solid ${theme.PALETTE.gray300};\n  }\n`;\n","import React, { createRef, useEffect } from 'react';\nimport { CommentWrapper } from './styled';\nimport { useThemeContext } from '~/context/ThemeContextProvider';\n\nconst src = 'https://giscus.app/client.js';\nconst dataRepo = 'helloleesul/helloleesul.github.io';\n\nexport default function CommentWidget() {\n  const element = createRef<HTMLDivElement>();\n  const { theme } = useThemeContext();\n\n  useEffect(() => {\n    if (element.current === null) return;\n\n    const giscus: HTMLScriptElement = document.createElement('script');\n\n    const attributes = {\n      src,\n      'data-repo': dataRepo,\n      'data-repo-id': 'R_kgDOK2JRmA',\n      'data-category': 'General',\n      'data-category-id': 'DIC_kwDOK2JRmM4CcN0b',\n      'data-mapping': 'pathname',\n      'data-strict': '0',\n      'data-reactions-enabled': '1',\n      'data-emit-metadata': '0',\n      'data-input-position': 'bottom',\n      'data-theme': theme === 'dark' ? 'dark_dimmed' : 'light',\n      'data-lang': 'ko',\n      crossorigin: 'anonymous',\n      async: 'true',\n    };\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      giscus.setAttribute(key, value);\n    });\n\n    element.current.appendChild(giscus);\n  }, [theme]);\n\n  return <CommentWrapper ref={element} />;\n}\n","import styled from '@emotion/styled';\nimport theme from '~/styles/theme';\n\nexport const ArticleWrapper = styled.div`\n  display: flex;\n  padding-bottom: 3rem;\n  margin-bottom: 2rem;\n  border-bottom: 1px solid ${theme.PALETTE.gray300}\n  gap: 15rem;\n  > * {\n    flex: 1;\n    &:hover {\n      text-decoration: underline;\n    }\n    > div {\n      font-weight: bold;\n      margin-bottom: 0.5rem;\n      span {\n        display: inline-block;\n        margin: 0 1rem;\n      }\n    }\n  }\n  .prev {\n    text-align: left;\n  }\n  .next {\n    text-align: right;\n  }\n`;\n","import React from 'react';\nimport { ArticleWrapper } from './styled';\nimport { Link } from 'gatsby';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faChevronLeft,\n  faChevronRight,\n} from '@fortawesome/free-solid-svg-icons';\nimport { PageContextType } from '~/types/Post.types';\n\nexport default function ArticleLinks({ prev, next }: PageContextType) {\n  return (\n    <ArticleWrapper>\n      {prev && (\n        <Link to={prev.fields.slug} className=\"prev\">\n          <div>\n            <FontAwesomeIcon icon={faChevronLeft} />\n            <span>다음 글</span>\n          </div>\n          <p>{prev.frontmatter.title}</p>\n        </Link>\n      )}\n      {next && (\n        <Link to={next.fields.slug} className=\"next\">\n          <div>\n            <span>이전 글</span>\n            <FontAwesomeIcon icon={faChevronRight} />\n          </div>\n          <p>{next.frontmatter.title}</p>\n        </Link>\n      )}\n    </ArticleWrapper>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const TOCWrapper = styled.nav`\n  #table-on-contents {\n    position: sticky;\n    top: 3rem;\n    flex: 1;\n\n    > p {\n      font-weight: bold;\n      font-size: 20px;\n      margin-bottom: 1rem;\n    }\n\n    div {\n      ul,\n      li {\n        list-style: none;\n        padding: 0;\n        font-size: 14px;\n      }\n      a {\n        margin-bottom: 0.5rem;\n        display: block;\n        &:hover {\n          text-decoration: underline;\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport { TOCWrapper } from './styled';\n\nexport default function TableOfContents(props: { contents: string }) {\n  return (\n    <TOCWrapper>\n      <div id=\"table-on-contents\">\n        <p>Contents</p>\n        <div dangerouslySetInnerHTML={{ __html: props.contents }} />\n      </div>\n    </TOCWrapper>\n  );\n}\n","import React from 'react';\nimport { graphql } from 'gatsby';\n\nimport { PageContextType, PostFrontmatterType } from '~/types/Post.types';\nimport Layout from '~/layout';\nimport PostHead from '~/components/PostHead';\nimport PostContent from '~/components/PostContent';\nimport Comment from '~/components/Comment';\nimport Profile from '~/components/Profile';\nimport { IGatsbyImageData } from 'gatsby-plugin-image';\nimport ArticleLinks from '~/components/ArticleLinks';\nimport TableOfContents from '~/components/TableOfContents';\nimport styled from '@emotion/styled';\nimport { TABLET } from '~/styles/common';\nimport ToTopButton from '~/components/ToTopButton';\n\nconst PostWrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  grid-template-areas: 'article article article nav';\n  gap: 2rem;\n  > article {\n    grid-area: article;\n  }\n  > nav {\n    grid-area: nav;\n  }\n  ${TABLET} {\n    display: block;\n    nav {\n      display: none;\n    }\n  }\n`;\n\ntype PostTemplateProps = {\n  data: {\n    allMarkdownRemark: {\n      edges: PostPageItemType[];\n    };\n    file: {\n      childImageSharp: {\n        gatsbyImageData: IGatsbyImageData;\n      };\n      publicURL: string;\n    };\n  };\n  location: {\n    href: string;\n  };\n  pageContext: PageContextType;\n};\n\nexport type PostPageItemType = {\n  node: {\n    tableOfContents: string;\n    fields: { readingTime: { text: string } };\n    html: string;\n    frontmatter: PostFrontmatterType;\n  };\n};\n\nexport default function PostTemplate({\n  data: {\n    allMarkdownRemark: { edges },\n    file,\n  },\n  location: { href },\n  pageContext,\n}: PostTemplateProps) {\n  const {\n    node: {\n      tableOfContents,\n      fields: {\n        readingTime: { text },\n      },\n      html,\n      frontmatter: {\n        title,\n        summary,\n        date,\n        categories,\n        thumbnail: {\n          childImageSharp: { gatsbyImageData },\n          publicURL,\n        },\n      },\n    },\n  } = edges[0];\n  return (\n    <Layout title={title} description={summary} url={href} image={publicURL}>\n      <PostWrapper>\n        <article>\n          <PostHead\n            title={title}\n            date={date}\n            categories={categories}\n            thumbnail={gatsbyImageData}\n            readingTime={text}\n          />\n          <PostContent html={html} />\n          <ArticleLinks {...pageContext} />\n          <Profile profileImage={file?.childImageSharp?.gatsbyImageData} />\n          <Comment />\n        </article>\n        <TableOfContents contents={tableOfContents} />\n      </PostWrapper>\n      <ToTopButton />\n    </Layout>\n  );\n}\n\nexport const queryMarkdownDataBySlug = graphql`\n  query queryMarkdownDataBySlug($slug: String) {\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n      edges {\n        node {\n          tableOfContents\n          fields {\n            readingTime {\n              text\n            }\n          }\n          html\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY-MM-DD\")\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData\n              }\n              publicURL\n            }\n          }\n        }\n      }\n    }\n    file(name: { eq: \"profile-image\" }) {\n      childImageSharp {\n        gatsbyImageData(width: 120, height: 120)\n      }\n      publicURL\n    }\n  }\n`;\n"],"names":["ButtonWrapper","_styled","target","name","styles","Button","ToTopButton","___EmotionJSX","onClick","handleToTop","window","scrollTo","top","behavior","FontAwesomeIcon","icon","faCircleChevronUp","size","color","theme","PALETTE","gray300","PostHeadInfoWrapper","Title","TABLET","PostData","Category","Date","RoundItem","CategoryItem","props","Link","SCALE_TRANSITION","PostHeadInfo","_ref","title","date","categories","readingTime","map","category","key","to","PostHeadWrapper","BackgroundImage","GatsbyImage","PostHead","thumbnail","image","alt","MarkdownRenderer","PostContent","html","id","dangerouslySetInnerHTML","__html","CommentWrapper","src","dataRepo","CommentWidget","element","createRef","useThemeContext","useEffect","current","giscus","document","createElement","attributes","crossorigin","async","Object","entries","forEach","value","setAttribute","appendChild","ref","ArticleWrapper","ArticleLinks","prev","next","fields","slug","className","faChevronLeft","frontmatter","faChevronRight","TOCWrapper","TableOfContents","contents","PostWrapper","PostTemplate","_file$childImageSharp","data","allMarkdownRemark","edges","file","location","href","pageContext","node","tableOfContents","text","summary","childImageSharp","gatsbyImageData","publicURL","Layout","description","url","Profile","profileImage","Comment"],"sourceRoot":""}